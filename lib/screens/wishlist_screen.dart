// file: lib/screens/wishlist_screen.dart
import 'package:fashion_store_app/views/home/product_details_screen.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:iconsax/iconsax.dart'; // Cho icon
import '../providers/wishlist_provider.dart';
import '../utils/formatter.dart';
// Import ProductDetailScreen ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng khi nh·∫•n v√†o s·∫£n ph·∫©m
// import 'product_detail_screen.dart'; // B·∫°n c·∫ßn c√≥ m√†n h√¨nh n√†y

class WishlistScreen extends StatefulWidget {
  const WishlistScreen({super.key});

  @override
  State<WishlistScreen> createState() => _WishlistScreenState();
}

class _WishlistScreenState extends State<WishlistScreen> {
  @override
  void initState() {
    super.initState();
    // T·∫£i wishlist khi m√†n h√¨nh ƒë∆∞·ª£c t·∫°o, n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
    // Provider c√≥ th·ªÉ ƒë√£ t·ª± t·∫£i trong constructor n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final wishlistProvider = Provider.of<WishlistProvider>(context, listen: false);
      // Ch·ªâ fetch n·∫øu danh s√°ch r·ªóng v√† kh√¥ng ƒëang loading (tr√°nh g·ªçi th·ª´a)
      if (wishlistProvider.wishlistItems.isEmpty && !wishlistProvider.isLoading) {
        wishlistProvider.fetchWishlist();
      }
    });
  }

  String _fixImageUrl(String? imageUrl) {
    if (imageUrl == null || imageUrl.isEmpty) return '';
    if (imageUrl.startsWith('http')) return imageUrl;
    if (imageUrl.startsWith('/images/products/')) {
      return 'http://10.0.2.2:8080$imageUrl';
    }
    return 'http://10.0.2.2:8080/images/products/$imageUrl';
  }


  @override
  Widget build(BuildContext context) {
    // L·∫Øng nghe thay ƒë·ªïi t·ª´ WishlistProvider
    final wishlistProvider = context.watch<WishlistProvider>();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Danh s√°ch Y√™u th√≠ch'),
        // backgroundColor: Theme.of(context).colorScheme.primary, // T√πy ch·ªânh m√†u AppBar
        // foregroundColor: Colors.white,
      ),
      body: _buildWishlistContent(context, wishlistProvider),
    );
  }

  Widget _buildWishlistContent(BuildContext context, WishlistProvider provider) {
    if (provider.isLoading && provider.wishlistItems.isEmpty) {
      // Hi·ªÉn th·ªã loading indicator khi ƒëang t·∫£i l·∫ßn ƒë·∫ßu v√† danh s√°ch r·ªóng
      return const Center(child: CircularProgressIndicator());
    }

    if (provider.errorMessage != null && provider.wishlistItems.isEmpty) {
      // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ l·ªói v√† danh s√°ch r·ªóng
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Iconsax.warning_2, size: 60, color: Colors.redAccent),
              const SizedBox(height: 16),
              Text(
                provider.errorMessage!,
                textAlign: TextAlign.center,
                style: const TextStyle(color: Colors.redAccent, fontSize: 16),
              ),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                icon: const Icon(Iconsax.refresh),
                label: const Text("Th·ª≠ l·∫°i"),
                onPressed: () => provider.fetchWishlist(),
              )
            ],
          ),
        ),
      );
    }

    if (provider.wishlistItems.isEmpty) {
      // ‚úÖ Hi·ªÉn th·ªã giao di·ªán "tr·ªëng r·ªóng" nh∆∞ h√¨nh ·∫£nh b·∫°n cung c·∫•p
      return _buildEmptyWishlist(context);
    }

    // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m y√™u th√≠ch
    return ListView.builder(
      padding: const EdgeInsets.all(8.0),
      itemCount: provider.wishlistItems.length,
      itemBuilder: (context, index) {
        final item = provider.wishlistItems[index];
        return Card(
          margin: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 8.0),
          elevation: 2,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          child: ListTile(
            contentPadding: const EdgeInsets.all(10),
            leading: SizedBox(
              width: 70,
              height: 70,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(8.0),
                child: item.productImageUrl != null && item.productImageUrl!.isNotEmpty
                    ? Image.network(
                  'http://10.0.2.2:8080${item.productImageUrl!}', // ‚úÖ ƒë√∫ng v·ªõi local server Android Emulator
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Container(
                      color: Colors.grey[200],
                      child: const Icon(Iconsax.gallery_slash, color: Colors.grey),
                    );
                  },
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress == null) return child;
                    return Center(
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        value: loadingProgress.expectedTotalBytes != null
                            ? loadingProgress.cumulativeBytesLoaded /
                            loadingProgress.expectedTotalBytes!
                            : null,
                      ),
                    );
                  },
                )
                    : Container(
                  color: Colors.grey[200],
                  child: const Icon(Iconsax.box_1, color: Colors.grey),
                ),
              ),

            ),
            title: Text(
              item.productName,
              style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
            ),
            subtitle: Text(
              item.productPrice != null
                  ? currencyFormatter.format(item.productPrice)
                  : 'N/A',
              style: TextStyle(
                color: Theme.of(context).colorScheme.primary,
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
            trailing: IconButton(
              icon: const Icon(Iconsax.heart_remove, color: Colors.redAccent),
              tooltip: 'X√≥a kh·ªèi y√™u th√≠ch',
              onPressed: () async {
                // G·ªçi h√†m x√≥a t·ª´ provider
                final success = await Provider.of<WishlistProvider>(context, listen: false)
                    .removeFromWishlist(item.productId, wishlistItemIdToDelete: item.wishlistItemId);
                if (context.mounted && !success) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(Provider.of<WishlistProvider>(context, listen: false).errorMessage ?? 'L·ªói khi x√≥a s·∫£n ph·∫©m.'), backgroundColor: Colors.red),
                  );
                }
                // Danh s√°ch s·∫Ω t·ª± c·∫≠p nh·∫≠t do provider g·ªçi notifyListeners
              },
            ),
            onTap: () {
              // TODO: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
              Navigator.push(context, MaterialPageRoute(builder: (_) => ProductDetailScreen(productId: item.productId)));
              print('Tapped on product: ${item.productName}');
            },
          ),
        );
      },
    );
  }

  // Widget cho giao di·ªán khi wishlist tr·ªëng
  Widget _buildEmptyWishlist(BuildContext context) {
    final Color buttonColor = Colors.blue.shade600; // L·∫•y m√†u t·ª´ theme ho·∫∑c ƒë·ªãnh nghƒ©a

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(30.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // ‚úÖ H√¨nh ·∫£nh/Icon (b·∫°n c√≥ th·ªÉ d√πng Image.asset n·∫øu c√≥ ·∫£nh)
            // Icon(Iconsax.heart_slash, size: 100, color: Colors.grey[400]),
            // Thay b·∫±ng Image.asset n·∫øu b·∫°n c√≥ ·∫£nh nh∆∞ trong m·∫´u
            Image.asset(
              'assets/images/empty.png', // üëà THAY B·∫∞NG ƒê∆Ø·ªúNG D·∫™N ·∫¢NH C·ª¶A B·∫†N
              // height: 150, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
              errorBuilder: (ctx, err, st) => Icon(Iconsax.box_remove, size: 100, color: Colors.grey[400]), // Fallback
            ),
            const SizedBox(height: 24),
            const Text(
              'Danh s√°ch y√™u th√≠ch tr·ªëng', // "Your shopping list is empty"
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 22,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              'B·∫°n ch∆∞a th√™m s·∫£n ph·∫©m n√†o v√†o danh s√°ch y√™u th√≠ch.', // "You have not added any product to wishlist"
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß ho·∫∑c trang s·∫£n ph·∫©m ƒë·ªÉ mua s·∫Øm
                // V√≠ d·ª•: quay l·∫°i trang home (n·∫øu wishlist l√† 1 tab c·ªßa home)
                if (Navigator.canPop(context)) {
                  // N·∫øu WishlistScreen ƒë∆∞·ª£c push l√™n t·ª´ ƒë√¢u ƒë√≥ (v√≠ d·ª• HomePage), th√¨ pop v·ªÅ.
                  // Ho·∫∑c n·∫øu HomePage qu·∫£n l√Ω c√°c tab, b·∫°n c√≥ th·ªÉ mu·ªën chuy·ªÉn tab.
                  // Gi·∫£ s·ª≠ HomePage l√† m·ªôt route v√† c√≥ th·ªÉ pop v·ªÅ ƒë√≥.
                  Navigator.popUntil(context, ModalRoute.withName('/home'));
                  // Ho·∫∑c ƒë∆°n gi·∫£n l√† pop m√†n h√¨nh hi·ªán t·∫°i n·∫øu n√≥ ƒë∆∞·ª£c push l√™n
                  Navigator.pop(context);
                } else {
                  // N·∫øu kh√¥ng pop ƒë∆∞·ª£c (v√≠ d·ª• Wishlist l√† m√†n h√¨nh ƒë·∫ßu ti√™n sau login),
                  // th√¨ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß b·∫±ng named route.
                  Navigator.pushReplacementNamed(context, '/home');
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: buttonColor,
                padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30.0),
                ),
              ),
              child: const Text('Ti·∫øp t·ª•c mua s·∫Øm', style: TextStyle(color: Colors.white)), // "To shopping"
            ),
          ],
        ),
      ),
    );
  }
}
