// file: lib/screens/reset_password_with_otp_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:iconsax/iconsax.dart'; // S·ª≠ d·ª•ng Iconsax cho icon
import '../../providers/forgot_password_provider.dart';
 // ƒê∆∞·ªùng d·∫´n ƒë·∫øn ForgotPasswordProvider

class ResetPasswordWithOtpScreen extends StatefulWidget {
  final String email; // Email ƒë∆∞·ª£c truy·ªÅn t·ª´ m√†n h√¨nh ForgotPasswordScreen

  const ResetPasswordWithOtpScreen({super.key, required this.email});

  @override
  State<ResetPasswordWithOtpScreen> createState() => _ResetPasswordWithOtpScreenState();
}

class _ResetPasswordWithOtpScreenState extends State<ResetPasswordWithOtpScreen> {

  @override
  void initState() {
    super.initState();
    // Khi m√†n h√¨nh ƒë∆∞·ª£c t·∫°o, reset c√°c tr∆∞·ªùng OTP v√† m·∫≠t kh·∫©u m·ªõi trong provider
    // ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≤n d·ªØ li·ªáu t·ª´ l·∫ßn tr∆∞·ªõc (n·∫øu c√≥)
    // Email controller trong provider s·∫Ω gi·ªØ nguy√™n gi√° tr·ªã t·ª´ ForgotPasswordScreen
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<ForgotPasswordProvider>(context, listen: false).resetOtpAndNewPasswordFields();
    });
  }

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u"
  void _submitResetPassword(BuildContext context) async {
    final provider = Provider.of<ForgotPasswordProvider>(context, listen: false);
    // H√†m verifyOtpAndResetPassword s·∫Ω g·ªçi API backend
    final success = await provider.verifyOtpAndResetPassword();

    if (success && context.mounted) { // Lu√¥n ki·ªÉm tra context.mounted
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(provider.message ?? 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3), // Hi·ªÉn th·ªã l√¢u h∆°n m·ªôt ch√∫t
        ),
      );
      // ƒêi·ªÅu h∆∞·ªõng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p v√† x√≥a t·∫•t c·∫£ c√°c route tr∆∞·ªõc ƒë√≥ kh·ªèi stack.
      // ƒê·∫£m b·∫£o '/login_input' (ho·∫∑c t√™n route m√†n h√¨nh ƒëƒÉng nh·∫≠p c·ªßa b·∫°n) ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.
      Navigator.of(context).pushNamedAndRemoveUntil('/login', (route) => false);
    } else if (context.mounted && provider.message != null) {
      // Hi·ªÉn th·ªã l·ªói n·∫øu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(provider.message!),
          backgroundColor: Colors.redAccent,
        ),
      );
    }
    // N·∫øu success l√† false v√† provider.message l√† null (tr∆∞·ªùng h·ª£p hi·∫øm),
    // c√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt l·ªói chung chung ho·∫∑c kh√¥ng l√†m g√¨ (v√¨ provider ƒë√£ log l·ªói).
  }

  @override
  Widget build(BuildContext context) {
    // context.watch ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi v√† rebuild UI (v√≠ d·ª•: khi _message ho·∫∑c _isLoading thay ƒë·ªïi)
    final provider = context.watch<ForgotPasswordProvider>();
    // context.read ƒë·ªÉ g·ªçi h√†m m√† kh√¥ng rebuild widget
    final providerActions = context.read<ForgotPasswordProvider>();

    // M√†u s·∫Øc (t∆∞∆°ng t·ª± ForgotPasswordScreen)
    const Color kPrimaryScreenColor = Color(0xFFF7F7F7); // M√†u n·ªÅn s√°ng
    const Color kTextColor = Color(0xFF333333);
    final Color kButtonColor = Colors.blue.shade600; // M√†u n√∫t ch√≠nh
    final Color kAppBarActionColor = Colors.blue.shade700; // M√†u cho n√∫t "H·ªßy"

    return Scaffold(
      backgroundColor: kPrimaryScreenColor,
      appBar: AppBar(
        title: const Text(
          "Reset Password!",
          style: TextStyle(color: kTextColor, fontSize: 18, fontWeight: FontWeight.w600),
        ),
        backgroundColor: Colors.transparent, // N·ªÅn trong su·ªët
        elevation: 0, // B·ªè shadow
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new, color: Colors.grey[700]),
          onPressed: () => Navigator.of(context).pop(), // Quay l·∫°i m√†n h√¨nh nh·∫≠p email
        ),
        actions: [
          TextButton(
            onPressed: () {
              // Quay v·ªÅ m√†n h√¨nh ƒë·∫ßu ti√™n c·ªßa stack (th∆∞·ªùng l√† Welcome ho·∫∑c Login)
              // Ho·∫∑c c·ª• th·ªÉ h∆°n l√† pop cho ƒë·∫øn khi g·∫∑p route Login
              Navigator.pushReplacementNamed(context, '/login');
            },
            child: Text(
              "Close",
              style: TextStyle(color: kAppBarActionColor, fontSize: 16, fontWeight: FontWeight.w500),
            ),
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(20.0), // Gi·∫£m padding m·ªôt ch√∫t
            child: Form(
              key: provider.resetPasswordFormKey, // S·ª≠ d·ª•ng key t·ª´ provider
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.stretch, // C√°c n√∫t s·∫Ω chi·∫øm h·∫øt chi·ªÅu r·ªông
                children: <Widget>[
                  Image.asset(
                    'assets/images/reset_password.png', // üëà THAY B·∫∞NG ƒê∆Ø·ªúNG D·∫™N ·∫¢NH C·ª¶A B·∫†N
                     //height: 150, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
                    errorBuilder: (ctx, err, st) => Icon(Iconsax.box_remove, size: 100, color: Colors.grey[400]), // Fallback
                  ),
                  const SizedBox(height: 10),
                  Text(
                    "X√°c th·ª±c T√†i kho·∫£n", // Ti√™u ƒë·ªÅ ch√≠nh
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 24, // Gi·∫£m k√≠ch th∆∞·ªõc m·ªôt ch√∫t
                      fontWeight: FontWeight.bold,
                      color: kTextColor.withOpacity(0.85),
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    // Hi·ªÉn th·ªã email m√† OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi
                    "M·ªôt m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email:\n${widget.email}\nVui l√≤ng nh·∫≠p m√£ ƒë√≥ v√† ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.",
                    textAlign: TextAlign.center,
                    style: TextStyle(fontSize: 15, color: Colors.black54, height: 1.4),
                  ),
                  const SizedBox(height: 35),

                  // Tr∆∞·ªùng nh·∫≠p OTP
                  TextFormField(
                    controller: provider.otpController, // Controller t·ª´ provider
                    keyboardType: TextInputType.number,

                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    decoration: _inputDecoration(
                      "Nh·∫≠p m√£ OTP", // Hint text
                      Iconsax.message_edit, // Icon
                      kButtonColor,
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Vui l√≤ng nh·∫≠p m√£ OTP';
                      }
                      if (value.trim().length != 6) {
                        return 'M√£ OTP ph·∫£i c√≥ 6 ch·ªØ s·ªë';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),

                  // Tr∆∞·ªùng nh·∫≠p M·∫≠t kh·∫©u m·ªõi
                  TextFormField(
                    controller: provider.newPasswordController,
                    obscureText: provider.hideNewPassword,
                    decoration: _inputDecoration(
                      "M·∫≠t kh·∫©u m·ªõi",
                      Iconsax.key,
                      kButtonColor,
                      suffixIcon: IconButton(
                        icon: Icon(provider.hideNewPassword ? Iconsax.eye_slash : Iconsax.eye, color: Colors.grey[600]),
                        onPressed: providerActions.toggleHideNewPassword,
                      ),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi';
                      }
                      if (value.length < 6) { // V√≠ d·ª•: y√™u c·∫ßu √≠t nh·∫•t 6 k√Ω t·ª±
                        return 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),

                  // Tr∆∞·ªùng X√°c nh·∫≠n M·∫≠t kh·∫©u m·ªõi
                  TextFormField(
                    controller: provider.confirmNewPasswordController,
                    obscureText: provider.hideConfirmNewPassword,
                    decoration: _inputDecoration(
                      "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
                      Iconsax.key,
                      kButtonColor,
                      suffixIcon: IconButton(
                        icon: Icon(provider.hideConfirmNewPassword ? Iconsax.eye_slash : Iconsax.eye, color: Colors.grey[600]),
                        onPressed: providerActions.toggleHideConfirmNewPassword,
                      ),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi';
                      }
                      if (value != provider.newPasswordController.text) {
                        return 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 30),

                  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ provider (n·∫øu c√≥)
                  if (provider.message != null && !provider.isLoading)
                    Padding(
                      padding: const EdgeInsets.only(bottom: 15.0),
                      child: Text(
                        provider.message!,
                        style: TextStyle(
                          // M√†u s·∫Øc c·ªßa message s·∫Ω ph·ª• thu·ªôc v√†o vi·ªác reset c√≥ th√†nh c√¥ng kh√¥ng
                          // (m·∫∑c d√π n·∫øu th√†nh c√¥ng th√¨ s·∫Ω ƒëi·ªÅu h∆∞·ªõng ƒëi)
                            color: provider.message!.toLowerCase().contains("th√†nh c√¥ng") ? Colors.green : Colors.redAccent,
                            fontWeight: FontWeight.bold
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),

                  // N√∫t "ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u"
                  provider.isLoading
                      ? Center(child: CircularProgressIndicator(color: kButtonColor))
                      : ElevatedButton(
                    onPressed: () => _submitResetPassword(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: kButtonColor,
                      padding: const EdgeInsets.symmetric(vertical: 16.0),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10.0),
                      ),
                      textStyle: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    child: const Text("ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u", style: TextStyle(color: Colors.white)),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  // H√†m helper cho InputDecoration (c√≥ th·ªÉ t√πy ch·ªânh th√™m)
  InputDecoration _inputDecoration(String hintText, IconData prefixIcon, Color focusedBorderColor, {Widget? suffixIcon}) {
    return InputDecoration(
      hintText: hintText,
      hintStyle: TextStyle(color: Colors.grey[500]), // M√†u hint nh·∫°t h∆°n
      prefixIcon: Icon(prefixIcon, color: Colors.grey[700], size: 20), // M√†u prefix icon
      suffixIcon: suffixIcon,
      filled: true,
      fillColor: Colors.white, // N·ªÅn tr·∫Øng cho input field
      border: OutlineInputBorder( // Border m·∫∑c ƒë·ªãnh
        borderRadius: BorderRadius.circular(10.0),
        borderSide: BorderSide(color: Colors.grey.shade300, width: 1.0),
      ),
      enabledBorder: OutlineInputBorder( // Border khi kh√¥ng focus
        borderRadius: BorderRadius.circular(10.0),
        borderSide: BorderSide(color: Colors.grey.shade300, width: 1.0),
      ),
      focusedBorder: OutlineInputBorder( // Border khi focus
        borderRadius: BorderRadius.circular(10.0),
        borderSide: BorderSide(color: focusedBorderColor, width: 1.5),
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
      errorStyle: const TextStyle(color: Colors.redAccent, fontWeight: FontWeight.w500),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10.0),
        borderSide: const BorderSide(color: Colors.redAccent, width: 1.0),
      ),
      focusedErrorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10.0),
        borderSide: const BorderSide(color: Colors.redAccent, width: 1.5),
      ),
    );
  }
}
