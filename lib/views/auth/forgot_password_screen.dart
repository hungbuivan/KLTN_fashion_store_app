// file: lib/screens/forgot_password_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:iconsax/iconsax.dart'; // N·∫øu b·∫°n d√πng Iconsax
import '../../providers/forgot_password_provider.dart';
// Import m√†n h√¨nh nh·∫≠p OTP v√† m·∫≠t kh·∫©u m·ªõi (s·∫Ω t·∫°o ·ªü B∆∞·ªõc 3)
import 'reset_password_with_otp_screen.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {

  @override
  void initState() {
    super.initState();
    // Reset tr·∫°ng th√°i c·ªßa provider khi m√†n h√¨nh ƒë∆∞·ª£c kh·ªüi t·∫°o
    // ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≤n d·ªØ li·ªáu t·ª´ l·∫ßn s·ª≠ d·ª•ng tr∆∞·ªõc
    // Tuy nhi√™n, emailController c√≥ th·ªÉ mu·ªën gi·ªØ l·∫°i n·∫øu ng∆∞·ªùi d√πng quay l·∫°i.
    // Ho·∫∑c reset khi provider ƒë∆∞·ª£c t·∫°o n·∫øu d√πng Provider.value
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // Provider.of<ForgotPasswordProvider>(context, listen: false).resetState(); // C√¢n nh·∫Øc
    });
  }

  void _submitRequestOtp(BuildContext context) async {
    final provider = Provider.of<ForgotPasswordProvider>(context, listen: false);
    final success = await provider.requestPasswordResetOtp();

    if (success && context.mounted) {
      // Hi·ªÉn th·ªã SnackBar th√¥ng b√°o (c√≥ th·ªÉ l·∫•y message t·ª´ provider)
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(provider.message ?? 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i (n·∫øu email t·ªìn t·∫°i).'),
          backgroundColor: Colors.green,
        ),
      );
      // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh nh·∫≠p OTP, truy·ªÅn email ƒë√£ nh·∫≠p
      Navigator.of(context).push(MaterialPageRoute(
        builder: (_) => ResetPasswordWithOtpScreen(email: provider.emailController.text),
      ));
    } else if (context.mounted && provider.message != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(provider.message!),
          backgroundColor: Colors.redAccent,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final provider = context.watch<ForgotPasswordProvider>(); // L·∫Øng nghe thay ƒë·ªïi

    // M√†u s·∫Øc d·ª±a tr√™n thi·∫øt k·∫ø b·∫°n cung c·∫•p (image_a43e52.png)
    const Color kPrimaryColor = Color(0xFFF7F7F7); // M√†u n·ªÅn s√°ng
    const Color kTextColor = Color(0xFF333333);
    const Color kSecondaryTextColor = Colors.black54;
    final Color kButtonColor = Colors.blue.shade600; // M√†u n√∫t (v√≠ d·ª•)
    final Color kAppBarActionColor = Colors.blue.shade700;

    return Scaffold(
      backgroundColor: kPrimaryColor,
      appBar: AppBar(
        backgroundColor: Colors.transparent, // N·ªÅn trong su·ªët
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new, color: Colors.grey[700]),
          onPressed: () => Navigator.of(context).pop(),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(
              "ƒê√≥ng",
              style: TextStyle(color: kAppBarActionColor, fontSize: 16, fontWeight: FontWeight.w500),
            ),
          ),
          const SizedBox(width: 10),
        ],
      ),
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(30.0),
            child: Form(
              key: provider.forgotPasswordEmailFormKey,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: <Widget>[
                  Image.asset(
                    'assets/images/forgot_password.png', // üëà THAY B·∫∞NG ƒê∆Ø·ªúNG D·∫™N ·∫¢NH C·ª¶A B·∫†N
                    // height: 150, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
                    errorBuilder: (ctx, err, st) => Icon(Iconsax.box_remove, size: 100, color: Colors.grey[400]), // Fallback
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    "B·∫°n qu√™n m·∫≠t kh·∫©u?",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: kTextColor,
                    ),
                  ),
                  const SizedBox(height: 15),
                  const Text(
                    "Nh·∫≠p email ƒëƒÉng k√Ω t√†i kho·∫£n c·ªßa b·∫°n, ch√∫ng t√¥i s·∫Ω g·ª≠i m·ªôt m√£ OTP t·ªõi email ƒë√≥!.",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 15,
                      color: kSecondaryTextColor,
                      height: 1.5,
                    ),
                  ),
                  const SizedBox(height: 40),
                  Text(
                    "ƒê·ªãa ch·ªâ email ƒëƒÉng k√Ω", // "New Email" trong thi·∫øt k·∫ø c√≥ v·∫ª l√† label
                    style: TextStyle(
                        color: Colors.grey[700],
                        fontSize: 12,
                        fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 8),
                  TextFormField(
                    controller: provider.emailController,
                    keyboardType: TextInputType.emailAddress,
                    decoration: InputDecoration(
                      hintText: "Nh·∫≠p email",
                      filled: true,
                      fillColor: Colors.white,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10.0),
                        borderSide: BorderSide(color: Colors.grey.shade300),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10.0),
                        borderSide: BorderSide(color: Colors.grey.shade300),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10.0),
                        borderSide: BorderSide(color: kButtonColor, width: 1.5),
                      ),
                      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n';
                      }
                      if (!RegExp(r"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z]+").hasMatch(value)) {
                        return 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 30),

                  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ provider (n·∫øu c√≥, sau khi nh·∫•n n√∫t)
                  if (provider.message != null && !provider.otpRequestSuccessful&& !provider.isLoading)
                    Padding(
                      padding: const EdgeInsets.only(bottom: 15.0),
                      child: Text(
                        provider.message!,
                        style: const TextStyle(color: Colors.redAccent, fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                      ),
                    ),

                  provider.isLoading
                      ? Center(child: CircularProgressIndicator(color: kButtonColor))
                      : ElevatedButton(
                    onPressed: () => _submitRequestOtp(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: kButtonColor,
                      padding: const EdgeInsets.symmetric(vertical: 16.0),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10.0),
                      ),
                      textStyle: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    child: const Text("G·ª≠i m√£ OTP", style: TextStyle(color: Colors.white)),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
