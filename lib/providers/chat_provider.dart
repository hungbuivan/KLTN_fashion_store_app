// file: lib/providers/chat_provider.dart
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:stomp_dart_client/stomp.dart';
import 'package:stomp_dart_client/stomp_config.dart';
import 'package:stomp_dart_client/stomp_frame.dart';

import 'auth_provider.dart';
import '../models/chat_message_model.dart';
import '../models/chat_room_model.dart';

class ChatProvider with ChangeNotifier {
  final AuthProvider authProvider;
  final String _wsUrl = 'ws://10.0.2.2:8080/ws';
  final String _restApiUrl = 'http://10.0.2.2:8080/api/chat';

  StompClient? _stompClient;

  // State
  List<ChatRoomModel> _chatRooms = [];
  List<ChatRoomModel> get chatRooms => _chatRooms;

  List<ChatMessageModel> _messages = [];
  List<ChatMessageModel> get messages => _messages;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  String? _errorMessage;
  String? get errorMessage => _errorMessage;

  ChatProvider(this.authProvider);
  // ‚úÖ TH√äM GETTER M·ªöI
  /// T√≠nh t·ªïng s·ªë ph√≤ng chat c√≥ tin nh·∫Øn ch∆∞a ƒë·ªçc.
  int get totalUnreadRoomsCount {
    if (_chatRooms.isEmpty) {
      return 0;
    }
    // D√πng fold ƒë·ªÉ c·ªông d·ªìn
    return _chatRooms.fold(0, (sum, room) => sum + (room.unreadCount > 0 ? 1 : 0));
  }


  // --- WebSocket & STOMP Logic ---

  void connectAndSubscribe(int roomId) {
    if (_stompClient?.isActive ?? false) {
      print("CHAT_PROVIDER_DEBUG: STOMP client ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi t·ª´ tr∆∞·ªõc.");
      return;
    }

    _stompClient = StompClient(
      // ‚úÖ S·ª¨A L·ªñI ·ªû ƒê√ÇY: D√πng StompConfig.SockJS
      config: StompConfig(
        url: _wsUrl,
        onConnect: (StompFrame frame) {
          print("CHAT_PROVIDER_DEBUG: ƒê√£ k·∫øt n·ªëi ƒë·∫øn STOMP server!");

          _stompClient?.subscribe(
            destination: '/topic/room/$roomId',
            callback: (frame) {
              print("CHAT_PROVIDER_DEBUG: ƒê√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi t·ª´ topic!");
              try {
                if (frame.body != null) {
                  final result = json.decode(frame.body!);
                  print("CHAT_PROVIDER_DEBUG: Body tin nh·∫Øn: ${frame.body}");
                  final newMessage = ChatMessageModel.fromJson(result);

                  _messages.insert(0, newMessage);
                  notifyListeners();
                }
              } catch (e) {
                print("CHAT_PROVIDER_DEBUG: L·ªói parse tin nh·∫Øn: $e");
              }
            },
          );
          // ‚úÖ 2. ƒêƒÇNG K√ù NH·∫¨N S·ª∞ KI·ªÜN "ƒê√É XEM"
          _stompClient?.subscribe(
            destination: '/topic/room/$roomId/seen',
            callback: (frame) {
              print("Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán SEEN_UPDATE");
              // Khi nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán n√†y, c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ tin nh·∫Øn ƒë√£ g·ª≠i
              bool changed = false;
              _messages = _messages.map((msg) {
                // Ch·ªâ c·∫≠p nh·∫≠t tin nh·∫Øn c·ªßa m√¨nh v√† ch∆∞a ƒë∆∞·ª£c xem
                if (msg.senderId == authProvider.user?.id && !msg.isSeen) {
                  changed = true;
                  return msg.copyWith(isSeen: true);
                }
                return msg;
              }).toList();

              if (changed) notifyListeners();
            },
          );
          print("CHAT_PROVIDER_DEBUG: ƒê√£ ƒëƒÉng k√Ω v√†o topic '/topic/room/$roomId'");
        },
        onWebSocketError: (dynamic error) => print("CHAT_PROVIDER_DEBUG: L·ªói WebSocket: $error"),
        onStompError: (StompFrame frame) => print("CHAT_PROVIDER_DEBUG: L·ªói STOMP: body='${frame.body}', headers='${frame.headers}'"),
        onDisconnect: (frame) => print("CHAT_PROVIDER_DEBUG: ƒê√£ ng·∫Øt k·∫øt n·ªëi."),
      ),
    );

    print("CHAT_PROVIDER_DEBUG: ƒêang k√≠ch ho·∫°t STOMP client...");
    _stompClient!.activate();
  }

  void sendMessage(String content, int roomId) {
    if (authProvider.user == null) return;
    if (_stompClient == null || !_stompClient!.isActive) {
      print("CHAT_PROVIDER_DEBUG: L·ªñI - Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn, STOMP client ch∆∞a k·∫øt n·ªëi.");
      return;
    }

    final senderId = authProvider.user!.id;
    final senderType = authProvider.isAdmin ? 'ADMIN' : 'USER';

    final messageBody = json.encode({
      'roomId': roomId,
      'senderId': senderId,
      'senderType': senderType,
      'content': content
    });

    print("CHAT_PROVIDER_DEBUG: ƒêang g·ª≠i tin nh·∫Øn ƒë·∫øn /app/chat.sendMessage v·ªõi body: $messageBody");
    _stompClient?.send(
      destination: '/app/chat.sendMessage',
      body: messageBody,
    );
  }

  void disconnect() {
    print("CHAT_PROVIDER_DEBUG: Ng·∫Øt k·∫øt n·ªëi STOMP client...");
    _stompClient?.deactivate();
    _stompClient = null;
  }

  void clearChatMessages() {
    _messages = [];
  }

  // --- REST API Logic ---

  Future<void> fetchMessageHistory(int roomId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      final response = await http.get(Uri.parse('$_restApiUrl/rooms/$roomId/messages'));
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(utf8.decode(response.bodyBytes));
        _messages = data.map((json) => ChatMessageModel.fromJson(json)).toList().reversed.toList();
      } else {
        _errorMessage = "L·ªói t·∫£i l·ªãch s·ª≠ tin nh·∫Øn.";
      }
    } catch(e) {
      _errorMessage = "L·ªói k·∫øt n·ªëi: ${e.toString()}";
    }

    _isLoading = false;
    notifyListeners();
  }

  Future<void> fetchChatRoomsForAdmin() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      final response = await http.get(Uri.parse('$_restApiUrl/rooms'));
      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(utf8.decode(response.bodyBytes));
        print('DEBUG: Chat rooms JSON data: $data'); // üîç Log ·ªü ƒë√¢y
        print("DEBUG: Chat rooms JSON data: ${response.body}");

        _chatRooms = data.map((json) => ChatRoomModel.fromJson(json)).toList();
      }
      else {
        _errorMessage = "L·ªói t·∫£i danh s√°ch chat.";
      }
    } catch(e) {
      _errorMessage = "L·ªói k·∫øt n·ªëi: ${e.toString()}";
    }
    _isLoading = false;
    notifyListeners();
  }

  Future<ChatRoomModel?> createOrGetChatRoomForUser() async {
    if (authProvider.user == null) return null;

    _isLoading = true;
    notifyListeners();

    try {
      final response = await http.post(
          Uri.parse('$_restApiUrl/rooms'),
          headers: {'Content-Type': 'application/json'},
          body: json.encode({'userId': authProvider.user!.id})
      );
      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        return ChatRoomModel.fromJson(data);
      }
    } catch (e) {
      _errorMessage = "L·ªói: ${e.toString()}";
    }
    _isLoading = false;
    notifyListeners();
    return null;
  }

  // ‚úÖ H√ÄM M·ªöI: ƒê√°nh d·∫•u ph√≤ng chat l√† ƒë√£ ƒë·ªçc
  Future<void> markRoomAsRead(int roomId) async {
    if (authProvider.isGuest || authProvider.user == null) return;

    final readerType = authProvider.isAdmin ? 'ADMIN' : 'USER';
    final url = Uri.parse('$_restApiUrl/rooms/$roomId/mark-as-read?readerType=$readerType');

    try {
      await http.post(url);
      print("ƒê√£ g·ª≠i y√™u c·∫ßu mark as read cho ph√≤ng $roomId, ng∆∞·ªùi ƒë·ªçc: $readerType");
      // Sau khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc, t·∫£i l·∫°i danh s√°ch ph√≤ng chat ƒë·ªÉ c·∫≠p nh·∫≠t unreadCount
      if (authProvider.isAdmin) {
        await fetchChatRoomsForAdmin();
      }
    } catch (e) {
      print("L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc: $e");
    }
  }

  // ‚úÖ H√ÄM M·ªöI: G·ªçi API ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
  Future<void> markMessagesAsSeen(int roomId) async {
    // Kh√¥ng c·∫ßn ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc n·∫øu l√† kh√°ch
    if (authProvider.isGuest || authProvider.user == null) return;

    final readerId = authProvider.user!.id;
    final url = Uri.parse('$_restApiUrl/rooms/$roomId/mark-as-seen?readerId=$readerId');
    try {
      await http.post(url);
      print("ƒê√£ g·ª≠i y√™u c·∫ßu mark as seen cho ph√≤ng $roomId, ng∆∞·ªùi ƒë·ªçc: $readerId");
    } catch (e) {
      print("L·ªói khi g·ª≠i y√™u c·∫ßu mark as seen: $e");
    }
  }

}
