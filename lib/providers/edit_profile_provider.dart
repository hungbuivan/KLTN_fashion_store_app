// file: lib/providers/edit_profile_provider.dart
import 'dart:convert';
// ƒê·ªÉ l√†m vi·ªác v·ªõi File
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart'; // Import image_picker
import 'auth_provider.dart'; // ƒê·ªÉ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin user

class EditProfileProvider with ChangeNotifier {
   AuthProvider authProvider;

  EditProfileProvider(this.authProvider);

  // Controllers cho c√°c tr∆∞·ªùng input
  final TextEditingController fullNameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();

   // ‚úÖ TH√äM CONTROLLERS CHO M·∫¨T KH·∫®U
   final TextEditingController currentPasswordController = TextEditingController();
   final TextEditingController newPasswordController = TextEditingController();
   final TextEditingController confirmPasswordController = TextEditingController();

  // L∆∞u tr·ªØ file ·∫£nh ƒë√£ ch·ªçn
  XFile? _pickedImageFile;
  XFile? get pickedImageFile => _pickedImageFile;

  // Tr·∫°ng th√°i loading v√† message
  bool _isLoading = false;
  bool get isLoading => _isLoading;

   bool _isPasswordSaving = false; // State ri√™ng cho vi·ªác l∆∞u m·∫≠t kh·∫©u
   bool get isPasswordSaving => _isPasswordSaving;

  String? _errorMessage;
  String? get errorMessage => _errorMessage;

  // ƒêi·ªÅn d·ªØ li·ªáu ban ƒë·∫ßu v√†o c√°c controller t·ª´ user hi·ªán t·∫°i
  void initialize() {
    if (authProvider.user != null) {
      fullNameController.text = authProvider.user!.fullName ?? '';
      phoneController.text = authProvider.user!.phone ?? '';
      _pickedImageFile = null; // Reset ·∫£nh ƒë√£ ch·ªçn m·ªói khi v√†o m√†n h√¨nh
    }
  }

  // H√†m ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  Future<void> pickImage() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(source: ImageSource.gallery, imageQuality: 50);
      if (image != null) {
        _pickedImageFile = image;
        notifyListeners(); // C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh m·ªõi ƒë√£ ch·ªçn
      }
    } catch (e) {
      _errorMessage = "Kh√¥ng th·ªÉ ch·ªçn ·∫£nh: ${e.toString()}";
      notifyListeners();
    }
  }

  // X√≥a ·∫£nh ƒë√£ ch·ªçn
  void clearImage() {
    _pickedImageFile = null;
    notifyListeners();
  }

  // H√†m g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin
   Future<bool> updateUserProfile() async {
     if (authProvider.user == null) {
       _errorMessage = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán vi·ªác n√†y.";
       return false;
     }

     _isLoading = true;
     _errorMessage = null;
     notifyListeners();

     try {
       final int userId = authProvider.user!.id;
       final url = Uri.parse('http://10.0.2.2:8080/api/users/$userId'); // URL backend

       var request = http.MultipartRequest('PUT', url);

       // Th√™m c√°c tr∆∞·ªùng text
       request.fields['fullName'] = fullNameController.text.trim();
       request.fields['phone'] = phoneController.text.trim();

       // N·∫øu c√≥ ·∫£nh th√¨ th√™m ·∫£nh v√†o form-data
       if (_pickedImageFile != null) {
         request.files.add(
           await http.MultipartFile.fromPath(
             'avatarFile', // key ph·∫£i tr√πng v·ªõi @RequestPart("avatarFile") ·ªü backend
             _pickedImageFile!.path,
           ),
         );
       }

       // ‚ùó FIX L·ªñI: Xo√° header m·∫∑c ƒë·ªãnh ƒë·ªÉ kh√¥ng b·ªã charset=UTF-8
       request.headers.clear();
       request.headers['Accept'] = 'application/json';
       // request.headers['Authorization'] = 'Bearer ${authProvider.token}'; // n·∫øu c·∫ßn x√°c th·ª±c

       print("Updating profile for user $userId...");
       final streamedResponse = await request.send();
       final response = await http.Response.fromStream(streamedResponse);

       print("Update profile response: ${response.statusCode} - ${response.body}");
       print("üî• Avatar m·ªõi trong AuthProvider: ${authProvider.user?.avt_url}");

       if (response.statusCode == 200) {
         await authProvider.fetchAndSetUser(); // c·∫≠p nh·∫≠t l·∫°i th√¥ng tin user m·ªõi
         _errorMessage = "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!";
         notifyListeners();
         return true;
       } else {
         final responseData = jsonDecode(response.body);
         _errorMessage = responseData['message'] ?? 'C·∫≠p nh·∫≠t th·∫•t b·∫°i.';
       }
     } catch (e) {
       _errorMessage = "L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω: ${e.toString()}";
       print("Error updating profile: $e");
     } finally {
       _isLoading = false;
       notifyListeners();
     }

     return false;
   }

   // ‚úÖ H√ÄM M·ªöI: ƒê·ªÇ THAY ƒê·ªîI M·∫¨T KH·∫®U
   Future<bool> changePassword() async {
     if (authProvider.user == null) {
       _errorMessage = "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán vi·ªác n√†y.";
       notifyListeners();
       return false;
     }

     _isPasswordSaving = true;
     _errorMessage = null;
     notifyListeners();

     try {
       final int userId = authProvider.user!.id;
       final url = Uri.parse('http://10.0.2.2:8080/api/users/$userId/change-password');

       final response = await http.post(
         url,
         headers: {'Content-Type': 'application/json; charset=UTF-8'},
         body: jsonEncode({
           'currentPassword': currentPasswordController.text,
           'newPassword': newPasswordController.text,
           'confirmPassword': confirmPasswordController.text,
         }),
       );

       final responseData = jsonDecode(utf8.decode(response.bodyBytes));
       if (response.statusCode == 200) {
         _errorMessage = "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!";
         // X√≥a c√°c tr∆∞·ªùng m·∫≠t kh·∫©u sau khi th√†nh c√¥ng
         currentPasswordController.clear();
         newPasswordController.clear();
         confirmPasswordController.clear();
         _isPasswordSaving = false;
         notifyListeners();
         return true;
       } else {
         _errorMessage = responseData['message'] ?? 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i.';
       }

     } catch (e) {
       _errorMessage = "L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω: ${e.toString()}";
     }

     _isPasswordSaving = false;
     notifyListeners();
     return false;
   }

   @override
   void dispose() {
     super.dispose();
     fullNameController.dispose();
     phoneController.dispose();
     currentPasswordController.dispose();
     newPasswordController.dispose();
     confirmPasswordController.dispose();
   }


}